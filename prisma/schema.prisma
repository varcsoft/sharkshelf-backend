generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB")
}

model faq {
  id          Int      @id @default(autoincrement())
  question    String   @unique @db.VarChar(255)
  answer      String   @db.Text
  status      Boolean  @default(true)
  created_on  DateTime @db.Timestamp(0)
  modified_on DateTime @default(now()) @db.Timestamp(0)
}

model users {
  user_id     Int       @unique
  email       String    @unique
  name        String
  status      Boolean   @default(true)
  address     String?
  profile_pic String?   @db.VarChar(255)
  role_id     Int?
  token       String?   @db.VarChar(255)
  deleted_on  DateTime? @db.Timestamp(0)
  created_on  DateTime  @db.Timestamp(0)
  modified_on DateTime  @default(now()) @db.Timestamp(0)
  review      review[]
}

model cart {
  id          Int      @id @default(autoincrement())
  quantity    Int
  product_id  Int?
  product     product? @relation(fields: [product_id], references: [id], onDelete: SetNull)
  user_id     Int?
  created_on  DateTime @db.Timestamp(0)
  modified_on DateTime @default(now()) @db.Timestamp(0)
}

model order {
  id              Int          @id @default(autoincrement())
  total           Float        @default(0)
  payment_id      String
  pay_method      String
  delivery_status String       @default("pending")
  order_mode      String
  user_id         Int?
  created_on      DateTime     @db.Timestamp(0)
  modified_on     DateTime     @default(now()) @db.Timestamp(0)
  order_item      order_item[]
}

model order_item {
  id         Int      @id @default(autoincrement())
  quantity   Int
  product_id Int?
  product    product? @relation(fields: [product_id], references: [id], onDelete: SetNull)
  order_id   Int?
  order      order?   @relation(fields: [order_id], references: [id], onDelete: SetNull)
}

model review {
  id          Int      @id @default(autoincrement())
  rating      Int // Rating on a scale (e.g., 1-5)
  comment     String?
  user_id     Int
  user        users    @relation(fields: [user_id], references: [user_id])
  product_id  Int
  product     product  @relation(fields: [product_id], references: [id])
  created_on  DateTime @db.Timestamp(0)
  modified_on DateTime @default(now()) @db.Timestamp(0)
}

model product {
  id             Int          @id @default(autoincrement())
  name           String       @db.VarChar(255)
  description    String       @db.Text
  price          Float
  offer_price    Float
  status         Boolean      @default(true)
  color          String?
  size           String?
  rating         Float?
  stock          Int          @default(0)
  brand          String       @default("Sharkshelf") @db.VarChar(50)
  theme          String       @default("coder") @db.VarChar(50)
  seller         String       @default("Sharkshelf") @db.VarChar(50)
  specification  String
  images         String[]
  category_id    Int?
  category       category?    @relation(fields: [category_id], references: [id], onDelete: SetNull)
  subcategory_id Int?
  subcategory    subcategory? @relation(fields: [subcategory_id], references: [id], onDelete: SetNull)
  created_on     DateTime     @db.Timestamp(0)
  modified_on    DateTime     @default(now()) @db.Timestamp(0)
  order_item     order_item[]
  cart           cart[]
  review         review[]
  wishlist       wishlist[]
  popular        popular[]
  deal           deal[]
}

model category {
  id          Int           @id @default(autoincrement())
  name        String        @unique @db.VarChar(50)
  image       String
  created_on  DateTime      @db.Timestamp(0)
  modified_on DateTime      @default(now()) @db.Timestamp(0)
  subcategory subcategory[]
  product     product[]
}

model subcategory {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  category_id Int?
  category    category? @relation(fields: [category_id], references: [id], onDelete: SetNull)
  created_on  DateTime  @db.Timestamp(0)
  modified_on DateTime  @default(now()) @db.Timestamp(0)
  product     product[]
}

model address {
  id          Int      @id @default(autoincrement())
  user_id     Int
  address     String
  city        String
  state       String
  postal_code String
  country     String
  created_on  DateTime @db.Timestamp(0)
  modified_on DateTime @default(now())
}

model wishlist {
  id          Int      @id @default(autoincrement())
  user_id     Int
  product_id  Int
  product     product  @relation(fields: [product_id], references: [id])
  created_on  DateTime @db.Timestamp(0)
  modified_on DateTime @default(now()) @db.Timestamp(0)
}

model banner {
  id          Int      @id @default(autoincrement())
  title       String
  image       String
  status      Boolean  @default(true)
  created_on  DateTime @db.Timestamp(0)
  modified_on DateTime @default(now()) @db.Timestamp(0)
}

model popular {
  id          Int      @id @default(autoincrement())
  product_id  Int
  product     product  @relation(fields: [product_id], references: [id])
  created_on  DateTime @db.Timestamp(0)
  modified_on DateTime @default(now()) @db.Timestamp(0)
}

model deal {
  id          Int      @id @default(autoincrement())
  product_id  Int
  product     product  @relation(fields: [product_id], references: [id])
  created_on  DateTime @db.Timestamp(0)
  modified_on DateTime @default(now()) @db.Timestamp(0)
}

model contact {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  phone       String
  description String
  status      Boolean  @default(true)
  created_on  DateTime @default(now())
  updated_on  DateTime @updatedAt
}
